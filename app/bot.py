from keys import telegram
from get_exel import get_exel_file
from worker_db import get_id_passed_false_count, get_all_airbnb_airdna_good_count, get_point
from datetime import datetime, timezone, timedelta
import telebot
from telebot import types
from telebot.types import BotCommand
import threading
import asyncio
import time


# –¢–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç BotFather
TOKEN = telegram

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)


# GET DAY AND TIME
def get_time_utcnow() -> time:
    current_time = datetime.now(timezone.utc).strftime("%M")
    return current_time



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/start'
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞—Ä—Å–µ—Ä Airbnb. –ü–∞—Ä—Å–µ—Ä –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –í –º–µ–Ω—é, –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –±–æ—Ç–∞. –í—Å–µ–≥–æ —Ö–æ—Ä–æ—à–µ–≥–æ.")




#### MENU ####
bot_commands = [
    BotCommand("exel", "–û—Ç—á–µ—Ç—ã"),
    BotCommand("count", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
    #BotCommand("bd", ""),
    BotCommand("bd", "* Backup DB"), # üíæ
]
bot.set_my_commands(bot_commands)


# #### EXEL ####
@bot.message_handler(commands=['exel'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    btn_exel_1 = types.InlineKeyboardButton("üìä –í—Å–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", callback_data='menu1')
    btn_exel_2 = types.InlineKeyboardButton("üìà –ü–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é –∫–æ–ª. Bedroom", callback_data='menu2')
    btn_exel_3 = types.InlineKeyboardButton("üìâ –ü–æ —É–±—ã–≤–∞–Ω–∏—é –∫–æ–ª. Bedroom", callback_data='menu3')
    markup.row(btn_exel_1)
    markup.row(btn_exel_2)
    markup.row(btn_exel_3)
    bot.send_message(message.chat.id, "üìä –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –æ—Ç—á–µ—Ç:", reply_markup=markup)

#### count ####
@bot.message_handler(commands=['count'])
def send_welcome(message):
    markup = types.InlineKeyboardMarkup()
    btn_count_1 = types.InlineKeyboardButton("üîã –û–±—ä–µ–∫—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ —Ä–∞–±–æ—Ç–µ", callback_data='count1')
    btn_count_2 = types.InlineKeyboardButton("ü™´ –û–±—ä–µ–∫—Ç–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏ –ø–µ—Ä–µ–æ–±—Ö–æ–¥–∞", callback_data='count2')
    btn_count_3 = types.InlineKeyboardButton("üíµ –í–∏–ª–∫–∞ $ –æ–±—Ö–æ–¥–∞ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç", callback_data='count3')
    markup.row(btn_count_1)
    markup.row(btn_count_2)
    markup.row(btn_count_3)
    bot.send_message(message.chat.id, "üßÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:", reply_markup=markup)

# menu1
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    bot.answer_callback_query(callback_query_id=call.id)

    current_start = get_time_utcnow()

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è "typing"
    def send_typing_action(chat_id):
        while not action_done.is_set():  # –ü–æ–∫–∞ —Ñ–ª–∞–≥ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º "typing"
            bot.send_chat_action(chat_id, 'typing')
            time.sleep(3)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ —Å–µ–∫—É–Ω–¥–∞—Ö –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏—è "typing"

    # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    action_done = threading.Event()

    # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ "typing"
    threading.Thread(target=send_typing_action, args=(call.message.chat.id,)).start()

    try:
        if call.data == 'menu1':
            choice = "1"
            file_exel = asyncio.run(get_exel_file(choice))
            with open(file_exel, "rb") as exel_file:
                bot.send_document(call.message.chat.id, exel_file)

        elif call.data == 'menu2':
            choice = "2"
            file_exel = asyncio.run(get_exel_file(choice))
            with open(file_exel, "rb") as exel_file:
                bot.send_document(call.message.chat.id, exel_file)

        elif call.data == 'menu3':
            choice = "3"
            file_exel = asyncio.run(get_exel_file(choice))
            with open(file_exel, "rb") as exel_file:
                bot.send_document(call.message.chat.id, exel_file)

        elif call.data == 'count1':
            file_exel = asyncio.run(get_all_airbnb_airdna_good_count())
            bot.send_message(call.message.chat.id, f"–û–±—ä–µ–∫—Ç–æ–≤ –≥–æ—Ç–æ–≤—ã—Ö –∫ —Ä–∞–±–æ—Ç–µ: {file_exel} –æ–±—ä–µ–∫—Ç.")


        elif call.data == 'count2':
            file_exel = asyncio.run(get_id_passed_false_count())
            bot.send_message(call.message.chat.id, f"–í –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–±—Ö–æ–¥–∞: {file_exel} –æ–±—ä–µ–∫—Ç.")

        elif call.data == 'count3':
            data = asyncio.run(get_point(1))
            if data is not None:
                price_min = data.price_min
                price_max = data.price_max
            bot.send_message(call.message.chat.id, f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–∞—Ä—Å–µ—Ä –ø—Ä–æ—Ö–æ–¥–∏—Ç\n –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç {price_min}$ –¥–æ {price_max}$")





            # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞—Ç—Ä–∞—á–µ–Ω–æ–≥–æ –Ω–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        current_end = get_time_utcnow()
        if current_start is not None and current_end is not None:
            difference = float(current_end) - float(current_start)
            bot.send_message(call.message.chat.id, f"–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–Ω—è–ª–æ: {round(difference, 2)} –º–∏–Ω.")
        else:
            bot.send_message(call.message.chat.id, f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ.")
    finally:
        # –ü–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥
        action_done.set()
#####












# # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# bot.polling()



max_attempts = 5
attempts = 0

while attempts < max_attempts:
    try:
        print("info: start bot")
        bot.polling()
        break
    except Exception as e:
        attempts += 1
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempts} –∏–∑ {max_attempts}. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
        time.sleep(60)

if attempts == max_attempts:
    print("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")